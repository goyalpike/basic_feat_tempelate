{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Simple Math Functions","text":"<p>It demonstrates simple math functions in python :-) However, main purpose of this repository to show how different components are connections; these includes:</p> <ul> <li>Automatic building of documentation </li> <li>Deployment of webpage using mkdocs</li> <li>Automatic running notebooks that are used to build documentation</li> <li>Installation of required packages using poetry in CI </li> <li>Option: Installation with conda; it is required when dependencies becomes complicated</li> </ul>"},{"location":"#examples","title":"Examples","text":"<p>It contains as of now two examples. Please have a look at simple examples.</p>"},{"location":"#code","title":"Code","text":"<p>Python is awesome</p> <pre><code>def say_hello(name:str = None):\n    if name:\n        print(f'Hello {name}!')\n    else:\n        print('Hello there!')\n</code></pre>"},{"location":"#todo","title":"TODO","text":"<p>We are in the stage of making more fancy. </p>"},{"location":"code_documentation/","title":"Math Operations Module","text":"<p>About the Module</p> <p>The <code>math_ops</code> module is highly optimized for performance and supports both integer and floating-point operations.</p>"},{"location":"code_documentation/#detailed-api-documentation","title":"Detailed API Documentation","text":"<p>Explore the detailed API documentation below:</p> <p>Quick Tip</p> <p>Use the <code>multiply</code> function for high-precision multiplications involving large numbers.</p>"},{"location":"code_documentation/#math_ops.basic_math_ops","title":"<code>basic_math_ops</code>","text":"<p>Define math functions.</p>"},{"location":"code_documentation/#math_ops.basic_math_ops.Adder","title":"<code>Adder</code>","text":"Source code in <code>src/math_ops/basic_math_ops.py</code> <pre><code>class Adder:\n    def __init__(self, num_a: float = 1.0) -&gt; None:\n        \"\"\"Define an adder.\"\"\"\n        self.num_a = num_a\n\n    def __call__(self, num_b: float) -&gt; float:\n        \"\"\"Add a number to a pre-defined adder.\"\"\"\n        return self.num_a + num_b\n</code></pre>"},{"location":"code_documentation/#math_ops.basic_math_ops.Adder.__call__","title":"<code>__call__(num_b)</code>","text":"<p>Add a number to a pre-defined adder.</p> Source code in <code>src/math_ops/basic_math_ops.py</code> <pre><code>def __call__(self, num_b: float) -&gt; float:\n    \"\"\"Add a number to a pre-defined adder.\"\"\"\n    return self.num_a + num_b\n</code></pre>"},{"location":"code_documentation/#math_ops.basic_math_ops.Adder.__init__","title":"<code>__init__(num_a=1.0)</code>","text":"<p>Define an adder.</p> Source code in <code>src/math_ops/basic_math_ops.py</code> <pre><code>def __init__(self, num_a: float = 1.0) -&gt; None:\n    \"\"\"Define an adder.\"\"\"\n    self.num_a = num_a\n</code></pre>"},{"location":"code_documentation/#math_ops.basic_math_ops.Multiplier","title":"<code>Multiplier</code>","text":"Source code in <code>src/math_ops/basic_math_ops.py</code> <pre><code>class Multiplier:\n    def __init__(self, num_a=1.0):\n        \"\"\"Define a multiplier.\"\"\"\n        self.num_a = num_a\n\n    def __call__(self, num_b):\n        \"\"\"Multiply a number to a pre-defined adder.\"\"\"\n        return self.num_a * num_b\n</code></pre>"},{"location":"code_documentation/#math_ops.basic_math_ops.Multiplier.__call__","title":"<code>__call__(num_b)</code>","text":"<p>Multiply a number to a pre-defined adder.</p> Source code in <code>src/math_ops/basic_math_ops.py</code> <pre><code>def __call__(self, num_b):\n    \"\"\"Multiply a number to a pre-defined adder.\"\"\"\n    return self.num_a * num_b\n</code></pre>"},{"location":"code_documentation/#math_ops.basic_math_ops.Multiplier.__init__","title":"<code>__init__(num_a=1.0)</code>","text":"<p>Define a multiplier.</p> Source code in <code>src/math_ops/basic_math_ops.py</code> <pre><code>def __init__(self, num_a=1.0):\n    \"\"\"Define a multiplier.\"\"\"\n    self.num_a = num_a\n</code></pre>"},{"location":"code_documentation/#math_ops.basic_math_ops.main","title":"<code>main()</code>","text":"<p>Define tests.</p> Source code in <code>src/math_ops/basic_math_ops.py</code> <pre><code>def main():\n    \"\"\"Define tests.\"\"\"\n    assert Adder(5)(10) == 15\n    assert Adder(4)(5) == 9\n    assert Multiplier(3)(10) == 30\n</code></pre>"},{"location":"code_documentation/#math_ops.utils","title":"<code>utils</code>","text":""},{"location":"code_documentation/#math_ops.utils.convert_notebooks_to_html","title":"<code>convert_notebooks_to_html(notebooks_dir, output_dir)</code>","text":"<p>Convert all Jupyter notebooks to HTML in the specified directory.</p> <p>Args: - notebooks_dir (str): The directory containing the Jupyter notebooks. - output_dir (str): The directory where the HTML files will be saved.</p> Source code in <code>src/math_ops/utils.py</code> <pre><code>def convert_notebooks_to_html(notebooks_dir, output_dir):\n    \"\"\"Convert all Jupyter notebooks to HTML in the specified directory.\n\n    Args:\n    - notebooks_dir (str): The directory containing the Jupyter notebooks.\n    - output_dir (str): The directory where the HTML files will be saved.\n    \"\"\"\n    notebooks_dir = Path(notebooks_dir).resolve()  # Convert to absolute Path object\n    output_dir = Path(output_dir).resolve()  # Convert to absolute Path object\n    output_dir.mkdir(parents=True, exist_ok=True)  # Create output directory if it doesn't exist\n\n    # Iterate over all notebook files in the specified directory\n    for notebook_file in notebooks_dir.glob(\"*.ipynb\"):  # Search for all .ipynb files\n        try:\n            # Load the notebook\n            with open(notebook_file, encoding=\"utf-8\") as f:\n                nb = nbformat.read(f, as_version=4)\n\n            # Create an ExecutePreprocessor object to execute the notebook\n            ep = ExecutePreprocessor(timeout=600, kernel_name=\"python3\")\n\n            # Execute the notebook\n            ep.preprocess(nb, {\"metadata\": {\"path\": str(notebooks_dir)}})\n\n            # Convert the executed notebook to HTML\n            html_exporter = HTMLExporter()\n            body, resources = html_exporter.from_notebook_node(nb)\n\n            # Write the HTML output\n            html_file = output_dir / (notebook_file.stem + \".html\")  # Replace .ipynb with .html\n            with open(html_file, \"w\", encoding=\"utf-8\") as f:\n                f.write(body)\n\n            print(f\"Converted and executed {notebook_file.name} to HTML.\")\n        except Exception as e:\n            print(f\"Error processing {notebook_file.name}: {e}\")\n</code></pre>"},{"location":"code_documentation/#math_ops.utils.convert_notebooks_to_md_with_outputs","title":"<code>convert_notebooks_to_md_with_outputs(notebooks_dir)</code>","text":"<p>Convert all Jupyter notebooks in a directory to Markdown files, including outputs.</p>"},{"location":"code_documentation/#math_ops.utils.convert_notebooks_to_md_with_outputs--parameters","title":"Parameters","text":"<p>notebooks_dir (str): Path to the directory containing the notebooks.</p> Source code in <code>src/math_ops/utils.py</code> <pre><code>def convert_notebooks_to_md_with_outputs(notebooks_dir):\n    \"\"\"Convert all Jupyter notebooks in a directory to Markdown files, including outputs.\n\n    Parameters\n    ----------\n    notebooks_dir (str): Path to the directory containing the notebooks.\n    \"\"\"\n    # Ensure the notebooks_dir path is absolute\n    notebooks_dir = os.path.abspath(notebooks_dir)\n\n    # Loop through all files in the directory\n    for filename in os.listdir(notebooks_dir):\n        if filename.endswith(\".ipynb\"):\n            notebook_path = os.path.join(notebooks_dir, filename)\n            md_filename = filename.replace(\".ipynb\", \".md\")\n            md_path = os.path.join(notebooks_dir, md_filename)\n\n            # Load the notebook\n            with open(notebook_path, encoding=\"utf-8\") as f:\n                notebook = nbformat.read(f, as_version=4)\n\n            # Convert notebook to Markdown with outputs\n            # Create a Jupytext writer that includes outputs\n            jupytext.write(notebook, md_path, fmt=\"md\")\n\n            print(f\"Converted {filename} to Markdown with outputs at {md_path}\")\n</code></pre>"},{"location":"code_documentation/#math_ops.utils.convert_notebooks_to_py","title":"<code>convert_notebooks_to_py(notebooks_dir, notebooks_dir_output)</code>","text":"<p>Convert .ipynb to .py.</p> Source code in <code>src/math_ops/utils.py</code> <pre><code>def convert_notebooks_to_py(notebooks_dir, notebooks_dir_output):\n    \"\"\"Convert .ipynb to .py.\"\"\"\n    notebooks_dir = Path(notebooks_dir).resolve()  # Convert to absolute Path object\n    notebooks_dir_output = Path(notebooks_dir_output).resolve()  # Convert to absolute Path object\n\n    for notebook_file in notebooks_dir.glob(\"*.ipynb\"):  # Search for all .ipynb files\n        if \"_demo\" not in str(notebook_file):\n            continue\n        try:\n            # Load the notebook using jupytext\n            notebook = jupytext.read(notebook_file)\n\n            # Determine the output path for the Python script\n            script_filename = notebook_file.stem + \".py\"  # Replace .ipynb with .py\n\n            script_path = notebooks_dir_output / script_filename\n\n            # Write the Python script using jupytext\n            jupytext.write(notebook, script_path, fmt=\"py:percent\")\n            print(f\"Succesfully converted {notebook_file}!\")\n\n        except Exception as e:\n            print(f\"Error converting {notebook_file.name}: {e}\")\n</code></pre>"},{"location":"code_documentation/#math_ops.utils.convert_py_to_notebooks","title":"<code>convert_py_to_notebooks(py_dir, notebooks_dir_output)</code>","text":"<p>Convert all Python scripts in the specified directory to Jupyter notebooks.</p> <p>Args: - py_dir (str): The directory containing the Python scripts. - notebooks_dir_output (str): The directory where the converted Jupyter notebooks will be saved.</p> Source code in <code>src/math_ops/utils.py</code> <pre><code>def convert_py_to_notebooks(py_dir, notebooks_dir_output):\n    \"\"\"Convert all Python scripts in the specified directory to Jupyter notebooks.\n\n    Args:\n    - py_dir (str): The directory containing the Python scripts.\n    - notebooks_dir_output (str): The directory where the converted Jupyter notebooks will be saved.\n    \"\"\"\n    py_dir = Path(py_dir).resolve()  # Convert to absolute Path object\n    notebooks_dir_output = Path(notebooks_dir_output).resolve()  # Convert to absolute Path object\n\n    # Iterate over all files in the specified directory\n    for py_file in py_dir.glob(\"*.py\"):  # Search for all .py files\n        try:\n            # Load the Python script using jupytext\n            # jupytext.read() will detect the cell markers and convert accordingly\n            notebook = jupytext.read(py_file, fmt=\"py:percent\")\n\n            # Determine the output path for the Jupyter notebook\n            notebook_filename = py_file.stem + \".ipynb\"  # Replace .py with .ipynb\n            notebook_path = notebooks_dir_output / notebook_filename\n\n            # Write the Jupyter notebook using jupytext\n            jupytext.write(notebook, notebook_path, fmt=\"ipynb\")\n\n            print(f\"Converted {py_file.name} to {notebook_filename}.\")\n\n            # Load the newly created notebook\n            with open(notebook_path, encoding=\"utf-8\") as f:\n                nb = nbformat.read(f, as_version=4)\n\n            # Create an ExecutePreprocessor object to execute the notebook\n            ep = ExecutePreprocessor(timeout=600, kernel_name=\"python3\")\n\n            # Execute the notebook\n            ep.preprocess(nb, {\"metadata\": {\"path\": str(notebooks_dir_output)}})\n\n            # Save the executed notebook\n            with open(notebook_path, \"w\", encoding=\"utf-8\") as f:\n                nbformat.write(nb, f)\n\n            print(f\"Executed and saved {notebook_filename}.\")\n        except Exception as e:\n            print(f\"Error converting {py_file.name}: {e}\")\n</code></pre>"},{"location":"autoapi/summary/","title":"Summary","text":"<ul> <li>MLops<ul> <li>convert_py_nb</li> </ul> </li> <li>src<ul> <li>example_scripts<ul> <li>01_demo</li> <li>02_demo</li> </ul> </li> <li>math_ops<ul> <li>basic_math_ops</li> <li>utils</li> </ul> </li> </ul> </li> <li>tests<ul> <li>math_ops_test</li> </ul> </li> </ul>"},{"location":"autoapi/MLops/convert_py_nb/","title":"Convert py nb","text":""},{"location":"autoapi/src/example_scripts/01_demo/","title":"01 demo","text":""},{"location":"autoapi/src/example_scripts/02_demo/","title":"02 demo","text":""},{"location":"autoapi/src/math_ops/","title":"Index","text":""},{"location":"autoapi/src/math_ops/basic_math_ops/","title":"Basic math ops","text":"<p>Define math functions.</p>"},{"location":"autoapi/src/math_ops/basic_math_ops/#src.math_ops.basic_math_ops.Adder","title":"<code>Adder</code>","text":"Source code in <code>src/math_ops/basic_math_ops.py</code> <pre><code>class Adder:\n    def __init__(self, num_a: float = 1.0) -&gt; None:\n        \"\"\"Define an adder.\"\"\"\n        self.num_a = num_a\n\n    def __call__(self, num_b: float) -&gt; float:\n        \"\"\"Add a number to a pre-defined adder.\"\"\"\n        return self.num_a + num_b\n</code></pre>"},{"location":"autoapi/src/math_ops/basic_math_ops/#src.math_ops.basic_math_ops.Adder.__call__","title":"<code>__call__(num_b)</code>","text":"<p>Add a number to a pre-defined adder.</p> Source code in <code>src/math_ops/basic_math_ops.py</code> <pre><code>def __call__(self, num_b: float) -&gt; float:\n    \"\"\"Add a number to a pre-defined adder.\"\"\"\n    return self.num_a + num_b\n</code></pre>"},{"location":"autoapi/src/math_ops/basic_math_ops/#src.math_ops.basic_math_ops.Adder.__init__","title":"<code>__init__(num_a=1.0)</code>","text":"<p>Define an adder.</p> Source code in <code>src/math_ops/basic_math_ops.py</code> <pre><code>def __init__(self, num_a: float = 1.0) -&gt; None:\n    \"\"\"Define an adder.\"\"\"\n    self.num_a = num_a\n</code></pre>"},{"location":"autoapi/src/math_ops/basic_math_ops/#src.math_ops.basic_math_ops.Multiplier","title":"<code>Multiplier</code>","text":"Source code in <code>src/math_ops/basic_math_ops.py</code> <pre><code>class Multiplier:\n    def __init__(self, num_a=1.0):\n        \"\"\"Define a multiplier.\"\"\"\n        self.num_a = num_a\n\n    def __call__(self, num_b):\n        \"\"\"Multiply a number to a pre-defined adder.\"\"\"\n        return self.num_a * num_b\n</code></pre>"},{"location":"autoapi/src/math_ops/basic_math_ops/#src.math_ops.basic_math_ops.Multiplier.__call__","title":"<code>__call__(num_b)</code>","text":"<p>Multiply a number to a pre-defined adder.</p> Source code in <code>src/math_ops/basic_math_ops.py</code> <pre><code>def __call__(self, num_b):\n    \"\"\"Multiply a number to a pre-defined adder.\"\"\"\n    return self.num_a * num_b\n</code></pre>"},{"location":"autoapi/src/math_ops/basic_math_ops/#src.math_ops.basic_math_ops.Multiplier.__init__","title":"<code>__init__(num_a=1.0)</code>","text":"<p>Define a multiplier.</p> Source code in <code>src/math_ops/basic_math_ops.py</code> <pre><code>def __init__(self, num_a=1.0):\n    \"\"\"Define a multiplier.\"\"\"\n    self.num_a = num_a\n</code></pre>"},{"location":"autoapi/src/math_ops/basic_math_ops/#src.math_ops.basic_math_ops.main","title":"<code>main()</code>","text":"<p>Define tests.</p> Source code in <code>src/math_ops/basic_math_ops.py</code> <pre><code>def main():\n    \"\"\"Define tests.\"\"\"\n    assert Adder(5)(10) == 15\n    assert Adder(4)(5) == 9\n    assert Multiplier(3)(10) == 30\n</code></pre>"},{"location":"autoapi/src/math_ops/utils/","title":"Utils","text":""},{"location":"autoapi/src/math_ops/utils/#src.math_ops.utils.convert_notebooks_to_html","title":"<code>convert_notebooks_to_html(notebooks_dir, output_dir)</code>","text":"<p>Convert all Jupyter notebooks to HTML in the specified directory.</p> <p>Args: - notebooks_dir (str): The directory containing the Jupyter notebooks. - output_dir (str): The directory where the HTML files will be saved.</p> Source code in <code>src/math_ops/utils.py</code> <pre><code>def convert_notebooks_to_html(notebooks_dir, output_dir):\n    \"\"\"Convert all Jupyter notebooks to HTML in the specified directory.\n\n    Args:\n    - notebooks_dir (str): The directory containing the Jupyter notebooks.\n    - output_dir (str): The directory where the HTML files will be saved.\n    \"\"\"\n    notebooks_dir = Path(notebooks_dir).resolve()  # Convert to absolute Path object\n    output_dir = Path(output_dir).resolve()  # Convert to absolute Path object\n    output_dir.mkdir(parents=True, exist_ok=True)  # Create output directory if it doesn't exist\n\n    # Iterate over all notebook files in the specified directory\n    for notebook_file in notebooks_dir.glob(\"*.ipynb\"):  # Search for all .ipynb files\n        try:\n            # Load the notebook\n            with open(notebook_file, encoding=\"utf-8\") as f:\n                nb = nbformat.read(f, as_version=4)\n\n            # Create an ExecutePreprocessor object to execute the notebook\n            ep = ExecutePreprocessor(timeout=600, kernel_name=\"python3\")\n\n            # Execute the notebook\n            ep.preprocess(nb, {\"metadata\": {\"path\": str(notebooks_dir)}})\n\n            # Convert the executed notebook to HTML\n            html_exporter = HTMLExporter()\n            body, resources = html_exporter.from_notebook_node(nb)\n\n            # Write the HTML output\n            html_file = output_dir / (notebook_file.stem + \".html\")  # Replace .ipynb with .html\n            with open(html_file, \"w\", encoding=\"utf-8\") as f:\n                f.write(body)\n\n            print(f\"Converted and executed {notebook_file.name} to HTML.\")\n        except Exception as e:\n            print(f\"Error processing {notebook_file.name}: {e}\")\n</code></pre>"},{"location":"autoapi/src/math_ops/utils/#src.math_ops.utils.convert_notebooks_to_md_with_outputs","title":"<code>convert_notebooks_to_md_with_outputs(notebooks_dir)</code>","text":"<p>Convert all Jupyter notebooks in a directory to Markdown files, including outputs.</p>"},{"location":"autoapi/src/math_ops/utils/#src.math_ops.utils.convert_notebooks_to_md_with_outputs--parameters","title":"Parameters","text":"<p>notebooks_dir (str): Path to the directory containing the notebooks.</p> Source code in <code>src/math_ops/utils.py</code> <pre><code>def convert_notebooks_to_md_with_outputs(notebooks_dir):\n    \"\"\"Convert all Jupyter notebooks in a directory to Markdown files, including outputs.\n\n    Parameters\n    ----------\n    notebooks_dir (str): Path to the directory containing the notebooks.\n    \"\"\"\n    # Ensure the notebooks_dir path is absolute\n    notebooks_dir = os.path.abspath(notebooks_dir)\n\n    # Loop through all files in the directory\n    for filename in os.listdir(notebooks_dir):\n        if filename.endswith(\".ipynb\"):\n            notebook_path = os.path.join(notebooks_dir, filename)\n            md_filename = filename.replace(\".ipynb\", \".md\")\n            md_path = os.path.join(notebooks_dir, md_filename)\n\n            # Load the notebook\n            with open(notebook_path, encoding=\"utf-8\") as f:\n                notebook = nbformat.read(f, as_version=4)\n\n            # Convert notebook to Markdown with outputs\n            # Create a Jupytext writer that includes outputs\n            jupytext.write(notebook, md_path, fmt=\"md\")\n\n            print(f\"Converted {filename} to Markdown with outputs at {md_path}\")\n</code></pre>"},{"location":"autoapi/src/math_ops/utils/#src.math_ops.utils.convert_notebooks_to_py","title":"<code>convert_notebooks_to_py(notebooks_dir, notebooks_dir_output)</code>","text":"<p>Convert .ipynb to .py.</p> Source code in <code>src/math_ops/utils.py</code> <pre><code>def convert_notebooks_to_py(notebooks_dir, notebooks_dir_output):\n    \"\"\"Convert .ipynb to .py.\"\"\"\n    notebooks_dir = Path(notebooks_dir).resolve()  # Convert to absolute Path object\n    notebooks_dir_output = Path(notebooks_dir_output).resolve()  # Convert to absolute Path object\n\n    for notebook_file in notebooks_dir.glob(\"*.ipynb\"):  # Search for all .ipynb files\n        if \"_demo\" not in str(notebook_file):\n            continue\n        try:\n            # Load the notebook using jupytext\n            notebook = jupytext.read(notebook_file)\n\n            # Determine the output path for the Python script\n            script_filename = notebook_file.stem + \".py\"  # Replace .ipynb with .py\n\n            script_path = notebooks_dir_output / script_filename\n\n            # Write the Python script using jupytext\n            jupytext.write(notebook, script_path, fmt=\"py:percent\")\n            print(f\"Succesfully converted {notebook_file}!\")\n\n        except Exception as e:\n            print(f\"Error converting {notebook_file.name}: {e}\")\n</code></pre>"},{"location":"autoapi/src/math_ops/utils/#src.math_ops.utils.convert_py_to_notebooks","title":"<code>convert_py_to_notebooks(py_dir, notebooks_dir_output)</code>","text":"<p>Convert all Python scripts in the specified directory to Jupyter notebooks.</p> <p>Args: - py_dir (str): The directory containing the Python scripts. - notebooks_dir_output (str): The directory where the converted Jupyter notebooks will be saved.</p> Source code in <code>src/math_ops/utils.py</code> <pre><code>def convert_py_to_notebooks(py_dir, notebooks_dir_output):\n    \"\"\"Convert all Python scripts in the specified directory to Jupyter notebooks.\n\n    Args:\n    - py_dir (str): The directory containing the Python scripts.\n    - notebooks_dir_output (str): The directory where the converted Jupyter notebooks will be saved.\n    \"\"\"\n    py_dir = Path(py_dir).resolve()  # Convert to absolute Path object\n    notebooks_dir_output = Path(notebooks_dir_output).resolve()  # Convert to absolute Path object\n\n    # Iterate over all files in the specified directory\n    for py_file in py_dir.glob(\"*.py\"):  # Search for all .py files\n        try:\n            # Load the Python script using jupytext\n            # jupytext.read() will detect the cell markers and convert accordingly\n            notebook = jupytext.read(py_file, fmt=\"py:percent\")\n\n            # Determine the output path for the Jupyter notebook\n            notebook_filename = py_file.stem + \".ipynb\"  # Replace .py with .ipynb\n            notebook_path = notebooks_dir_output / notebook_filename\n\n            # Write the Jupyter notebook using jupytext\n            jupytext.write(notebook, notebook_path, fmt=\"ipynb\")\n\n            print(f\"Converted {py_file.name} to {notebook_filename}.\")\n\n            # Load the newly created notebook\n            with open(notebook_path, encoding=\"utf-8\") as f:\n                nb = nbformat.read(f, as_version=4)\n\n            # Create an ExecutePreprocessor object to execute the notebook\n            ep = ExecutePreprocessor(timeout=600, kernel_name=\"python3\")\n\n            # Execute the notebook\n            ep.preprocess(nb, {\"metadata\": {\"path\": str(notebooks_dir_output)}})\n\n            # Save the executed notebook\n            with open(notebook_path, \"w\", encoding=\"utf-8\") as f:\n                nbformat.write(nb, f)\n\n            print(f\"Executed and saved {notebook_filename}.\")\n        except Exception as e:\n            print(f\"Error converting {py_file.name}: {e}\")\n</code></pre>"},{"location":"autoapi/tests/","title":"Index","text":""},{"location":"autoapi/tests/math_ops_test/","title":"Math ops test","text":""},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#some-notebooke-exampels","title":"Some notebooke exampels.","text":""},{"location":"examples/01_demo/","title":"01 demo","text":"In\u00a0[1]: Copied! <pre>from math_ops.basic_math_ops import Adder\n</pre> from math_ops.basic_math_ops import Adder <p>Define an instance which always adds five.</p> In\u00a0[2]: Copied! <pre>five_adder = Adder(5)\na = 20\nb = five_adder(a)\nprint(f\"five_adder to {a} is {b}.\")\n</pre> five_adder = Adder(5) a = 20 b = five_adder(a) print(f\"five_adder to {a} is {b}.\") <pre>five_adder to 10 is 15.\n</pre>"},{"location":"examples/02_demo/","title":"02 demo","text":"In\u00a0[1]: Copied! <pre>from math_ops.basic_math_ops import Multiplier\n</pre> from math_ops.basic_math_ops import Multiplier In\u00a0[2]: Copied! <pre>three_multiplier = Multiplier(3)\na = 10\nb = three_multiplier(a)\nprint(f\"three_multiplier of {a} is {b}.\")\n</pre> three_multiplier = Multiplier(3) a = 10 b = three_multiplier(a) print(f\"three_multiplier of {a} is {b}.\") <pre>three_mtulplier of 10 is 30.\n</pre>"}]}